n2
source('D:/progress/Coursera/DataScience/JohnHopkins/2_Rprogramming/Assignment2/makeVector.R')
cachemean(makeVector(n1))
cachemean
ls()
source('D:/progress/Coursera/DataScience/JohnHopkins/2_Rprogramming/Assignment2/makeVectorDebug.R')
ls()
cachemean
cachemean(makeVectorDebug(n1))
l <- list(a = 1, b= 2)
l
l <- list('b'= 1, 'c'= 3)
l
l$b
source('D:/progress/Coursera/DataScience/JohnHopkins/2_Rprogramming/Assignment3/ProgrammingAssignment2/cachematrix.R')
myMatrix = matrix(c(1,3,5,7), 2,2)
myMatrix
cacheSolve(makeCacheMatrix(myMatrix))
cacheSolve(makeCacheMatrix(myMatrix))
myList <- makeCacheMatrix(myMatrix)
cacheSolve(myList)
cacheSolve(myList)
source('D:/progress/Coursera/DataScience/JohnHopkins/2_Rprogramming/Assignment3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(myList)
myMatrix2 <- matrix(c(10,34,67,33, 89, 50, 62, 99, 21))
myList2 <- makeCacheMatrix(myMatrix2)
cacheSolve(myList2)
myMatrix
myMatrix2
myMatrix2 <- matrix(c(10,34,67,33, 89, 50, 62, 99, 21),3,3)
myList2 <- makeCacheMatrix(myMatrix2)
cacheSolve(myList2)
cacheSolve(myList2)
cacheSolve(myList2)
cacheSolve(myList)
ba990bdac3f52f601552fecc43d17864f8f92d92
ba990bdac3f52f601552fecc43d17864f8f92d92
myList
myList$get
ls(myList$get)
ls(environment(myList$get))
environment(myList$get)$inverse
environment(myList$getInverse)
environment(myList$getInverse())
source('D:/progress/Coursera/DataScience/JohnHopkins/2_Rprogramming/Assignment3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(myList2)
cacheSolve(myList)
myMatrix3 <- matrix(1, 1,1)
myList3 <- makeCacheMatrix(myMatrix3)
cacheSolve(myList3)
cacheSolve(myList3)
set.seed()
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
system.time(rnorm(500))
system.time(rnorm(5000))
system.time(rnorm(50000))
system.time(rnorm(500000))
system.time(rnorm(5000000))
system.time(rnorm(50000000))
rprof()
?rprof
Rprof()
Rprof(rnorm(50000000))
set.seed(1)
rpois(5,2)
?rpois
swirl()
install.packages("swirl")
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactor=F)
mydf <- read.csv(path2csv, stringsAsFactor=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tl_df
?tbl_df
cran
?select
select(cran, ip_id, package,country)
play()
cran$ip_id
head(cran$ip_id)
class(cran)
nxt()
5:20
View(cran)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select (cran, -time)
-5:20
-(5:20)
play()
-5:-20
-(5:20)
5:-20
nxt()
select(cran, -(x:size))
select(cran, -x:-size)
select(cran, x:size)
play()
select(cran, x:size)
class(cran)
library(ldpyr)
library(dplyr)
select(cran, x)
cran
head(cran$x)
head(cran$time)
head(cran$r_version)
select(cran, r_arch:r_os)
cran
select(cran, date:size)
nxt()
select(cran,date:size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r-version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,  r_version == !is.na(r_version))
filter(cran,  !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
View(cran2)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summary(by_package, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantitle(pack_sum$count, probs= .99)
quantitle(pack_sum$count, probs= 0.99)
?quantile
library(stats)
quantitle(pack_sum$count, probs= 0.99)
quantile(pack_sum$count, probs= 0.99)
top_counts <- filter(by_package, count > 679)
?filter
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
play()
gather(student, sex, count)
gather(students, sex, count)
gather(students, sex, count, -male, -female)
gather(students, sex, count, -grade)
students
nxt()
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
View(students2)
submit()
students3
play()
students3
gather(students3, class, grade, na.rm=TRUE)
gather(students3, class, grade, na.rm=TRUE, -name, -test)
gather(students3, class, grade, -name, -test)
gather(students3, class, grade, na.rm=TRUE, -name, -test)
nxt()
submit()
submit()
?spread()
?spread
paly()
gather(students3,class, grade, class1:class5, na.rm = TRUE))
gather(students3,class, grade, class1:class5, na.rm = TRUE)
gather(students3,class, grade, -name, -test, na.rm = TRUE)
nxt()
submit()
play()
gather(students3,class, grade, -name, -test, na.rm = TRUE)
gather(students3,class, grade, -name, -test, na.rm = TRUE) %>% spread(test, c("midterm", "final") )
gather(students3,class, grade, -name, -test, na.rm = TRUE) %>% spread(test, midterm, final )
gather(students3,class, grade, -name, -test, na.rm = TRUE) %>% spread(test, midterm )
gather(students3,class, grade, -name, -test, na.rm = TRUE) %>% spread(test, c(midterm, final) )
gather(students3,class, grade, -name, -test, na.rm = TRUE) %>% spread(midterm, final )
gather(students3,class, grade, -name, -test, na.rm = TRUE) %>% spread(test, class)
gather(students3,class, grade, -name, -test, na.rm = TRUE) %>% spread(test, grade)
nxt()
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status = "failed")
?bind_rows()
bind_rows(passed, failed)
sat
play()
sat %>% select( contains=="total")
sat %>% select( contains("total"))
sat %>% select( -contains("total"))
sat %>% select( -contains("total")) %>% gather(part_sex, count)
sat %>% select( -contains("total")) %>% gather(part_sex, count, -score_range)
sat %>% select( -contains("total")) %>% gather(part_sex, count, -score_range) %>% separate(part_sex, part, sex)
sat %>% select( -contains("total")) %>% gather(part_sex, count, -score_range) %>% separate(part_sex, c(part, sex))
sat %>% select( -contains("total")) %>% gather(part_sex, count, -score_range) %>% separate(part_sex, c("part", "sex"))
nxt()
submit()
submit()
submit()
submit()
submit()
setwd("D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project")
paste("x", "y")
paste0('x',"y")
paste0('x',"y", 123)
?read.table
data_location <- "UCI HAR Dataset"
which_data <- train
which_data <- "train"
paste0( data_location,"/", which_data, "/subject_", which_date, ".txt")
paste0( data_location,"/", which_data, "/subject_", which_data, ".txt")
source('~/.active-rstudio-document')
subject <- read.table( paste0( data_location,"/", which_data, "/subject_", which_data, ".txt"),
header = F, stringsAsFactors = F )
activity <- read.table( paste0( data_location, "/", which_data, "/y_", which_data, ".txt"),
header = F, stringsAsFactors = F)
fact <- read_table( paste0( data_location, "/", which_data, "/x_", which_data, ".txt"), ),
header = F, stringsAsFactors = F)
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
fact <- read_table( paste0( data_location, "/", which_data, "/x_", which_data, ".txt"),
header = F, stringsAsFactors = F)
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
fact <- read.table( paste0( data_location, "/", which_data, "/x_", which_data, ".txt"),
header = F, stringsAsFactors = F)
source('~/.active-rstudio-document')
?function
90
legnth(subject)
length(subject)
dim(subject)
head( seq(1:dim(subject)[1]))
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
rm(activity)
rm(fact)
rm(subject)
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
?join_all
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
subject <- read.table( paste0( data_location,"/", which_data, "/subject_", which_data, ".txt"),
header = F, stringsAsFactors = F )
activity <- read.table( paste0( data_location, "/", which_data, "/y_", which_data, ".txt"),
header = F, stringsAsFactors = F)
fact <- read.table( paste0( data_location, "/", which_data, "/x_", which_data, ".txt"),
header = F, stringsAsFactors = F)
subject <-mutate(subject, id = seq(1:dim(subject)[1]))
activity <-mutate(activity, id = seq(1:dim(activity)[1]))
fact <-mutate(fact, id = seq(1:dim(fact)[1]))
joinList <- list( subject, activity, fact)
intersect (names(subject), names(fact))
intersect (names(activity), names(fact))
names(subject) <- c("subject")
str(subject)
subject <- read.table( paste0( data_location,"/", which_data, "/subject_", which_data, ".txt"),
header = F, stringsAsFactors = F )
names(subject) <- c("subject")
str(subject)
names(fact)
test <- c( "name(,weird" = 123)
test
test <- c("tBodyAcc-mean-Z" = 2, z=2)
test
column_names <- read.table("dataset_ColumnNames.txt", header=T)
column_names <- read.table( paste0(data_location, "/dataset_ColumnNames.txt"), header=T)
column_names <- read.table( paste0(data_location, "/dataset_ColumnNames.txt"), header=F)
column_names <- read.table( paste0(data_location, "/features.txt"), header=F)
column_names <- read.table( paste0(data_location, "/features.txt"), header=F, stringsAsFactors = F)
head(column_names[,2])
head(names(fact))
names(fact) <- column_names[,2]
select(fact, contains("mean" | "std") )
?contains
??contains
?select
select(fact, contains("mean", ignore_case = T), contains("std", ignore_case = T) )
select(fact, contains("mean", ignore.case = T), contains("std", ignore.case = T) )
str(fact)
select(fact, contains("mean", ignore.case = T))
names(fact)
select(fact, contains("std", ignore.case = T))
str(column_names)
group_by(column_names, V2)
group_by(column_names, V2) %>% summarise(n())
group_by(column_names, V2) %>% summarise( count())
select(fact, contains("std"))
head(paste(column_names[,1], "-", column_names[,2]))
?paste
head(paste(column_names[,1], column_names[,2], sep="-"))
names(fact) <- paste(column_names[,1], column_names[,2], sep="-")
select(fact, contains("std"))
head(select(fact, contains("std")))
head(select(fact, contains("mean", ignore.case = T), contains("std", ignore.case = T)))
fact <- select(fact, contains("mean", ignore.case = T), contains("std", ignore.case = T))
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
dim(subject)
names(subject)
dim(subject)[2]
dim(subject)[1]
head(seq(1:dim(subject)[1]))
subject <-mutate(subject, id = seq(1:dim(subject)[1]))
class(seq(1:dim(subject)[1]))
subject <-mutate(subject, id = seq(1:(dim(subject)[1]))
)
subject <-mutate(subject, id = seq(1:(dim(subject)[1])))
df <- data.frame(x=seq(1:5))
df
df <- data.frame(x=seq(1:dim(subject)))
str(df)
df <- data.frame(x=seq(1:dim(subject)[1]))
mutate(df, y=seq(1:dim(subject)[1])
)
subject <-mutate(subject, id = =seq(1:dim(subject)[1]))
subject <-mutate(subject, id = seq(1:dim(subject)[1]))
subjects <-mutate(subject, id = seq(1:dim(subject)[1]))
subjects <-mutate(subject, id = 1:dim(subject)[1])
dims <- dim(subject)[1]
subjects <-mutate(subject, id = 1:dims)
rm subjects
rm(subjects)
subject <-mutate(subject, id = 1:dims)
rows <- dim(subject)[1]
subject <-mutate(subject, id = 1:rows))
rows <- dim(subject)[1]
subject <-mutate(subject, id = 1:rows)
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
train <- rbind( train, test)
mutate(train, activity = ( ifelse(act == 1, "WALKING", ifelse( act == 2, "WALKING_UPSTAIRS", ifelse( act == 3, "WALKING_DOWNSTAIRS", ifelse( act == 4, "SITTING", ifelse( act == 5, "STANDING", "LAYING")))))))
train <- mutate(train, activity = ( ifelse(act == 1, "WALKING", ifelse( act == 2, "WALKING_UPSTAIRS", ifelse( act == 3, "WALKING_DOWNSTAIRS", ifelse( act == 4, "SITTING", ifelse( act == 5, "STANDING", "LAYING")))))))
names(train)
ls
make.names(column_names)
?make.names
good_names <- make.names(column_names)
str(good_names)
str(column_names)
dim(good_names)
good_names{5}
good_names[5]
good_names[6]
good_names <- make.names(column_names[,2], unique = T)
good_names[6]
good_names[5]
str(good_names)
good_names[ grep("bandsEnergy")]
?rep
?grep
grep ("bandEnergy", good_names)
grep ("bandEnergy", good_names[,2])
grep ("mean", good_names)
grep ("std", good_names)
grep("bands", good_names)
good_names[ grep("bands", good_names)]
good_names[ grep("mean", good_names)]
good_names[ grep("mean", good_names, ignore.case=T)]
head(column_names)
head(names(fact))
names(fact) <- make.names( column_names[,2] )
fact <- read.table( paste0( data_location, "/", which_data, "/x_", which_data, ".txt"),
header = F, stringsAsFactors = F)
names(fact) <- make.names( column_names[,2] )
fact <- select(fact, contains("mean", ignore.case = T), contains("std", ignore.case = T))
?write.text
?write.csv
write.csv(make.names( column_names[,2] ), "good.csv")
?make.names
names(fact) <- make.names( column_names[,2], unique = T )
fact <- select(fact, contains("mean", ignore.case = T), contains("std", ignore.case = T))
names(fact)
gsub("...",".", names(fact))
gsub("\\.\\.\\.","\\.", names(fact))
gsub("\\.\\.\\.","\\.", names(fact)) %>% gsub("\\.\\.", "\\.")
gsub("[\\.]{2,3}","\\.", names(fact))
names(fact) <- gsub("[\\.]{2,3}","\\.", names(fact))
gsub("\\.$", "", names(fact))
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
names(train)
source('D:/progress/Coursera/DataScience/JohnsHopkins/3_GettingCleaningData/Project/run_analysis.R')
mutate(train, activity = ( ifelse( act == 1, "WALKING",
ifelse( act == 2, "WALKING_UPSTAIRS",
ifelse( act == 3, "WALKING_DOWNSTAIRS",
ifelse( act == 4, "SITTING",
ifelse( act == 5, "STANDING",
"LAYING"))))))) # act == 6
train <- mutate(train, activity = ( ifelse( act == 1, "WALKING",
ifelse( act == 2, "WALKING_UPSTAIRS",
ifelse( act == 3, "WALKING_DOWNSTAIRS",
ifelse( act == 4, "SITTING",
ifelse( act == 5, "STANDING",
"LAYING"))))))) # act == 6
by_activity_subject <- group_by(train, activity, subject)
str(by_activity_subject)
?group_by
View(test)
rm(activity)
rm(subject)
by_activity_subject <- group_by(train, activity, subject)
str(by_activity_subject)
summarize(by_activity_subject, n=sum(n))
summarize(by_activity_subject, n=sum())
?sum
head(names(train))
summarise(by_activity_subject, n = sum(id))
summarise(by_activity_subject, n = n(id))
summarise(by_activity_subject, n = n())
?n
summarise(by_activity_subject, n())
by_activity_subject <- group_by(activity, train)
group_by(train,activity)
by_activity <- group_by(train,activity)
str(by_activity)
class(by_activity)
class(by_activity_subject)
class(train)
summarize(by_activity, n())
library(plyr)
library(dplyt)
library(dplyr)
summarize(by_activity, n())
conflicts()
load(mtcars)
mtcars
mtcars %>% group_by(cyl, gear) %>% summarise(newvar = sum(wt))
mtcars %>% group_by(cyl, gear) %>% summarize(newvar = sum(wt))
mtcars %>% group_by(cyl) %>% summarise(n())
mtcars %>% group_by(cyl) %>% summarise(ndistinct()
)
str(mtcars)
mtcars %>% select(cyl, hp) %>% group_by(cyl) %>% summarise(mean(hp))
summary(mtcars)
head(hflights)
dim(hflights)
?hflights
install.packages("hflights")
dim(hflights)
load(hflights)
library(hflights)
dim(hflights)
summarise(hflights_df, delay = mea(DepDelay, na.rm=T))
summarise(hflights, delay = mea(DepDelay, na.rm=T))
summarise(hflights, delay = mean(DepDelay, na.rm=T))
names(hflights)
planes <- group_by(hflights, TaiNum)
planes <- group_by(hflights, TailNum)
class(planes)
delay <- summarise( planes, count = n())
